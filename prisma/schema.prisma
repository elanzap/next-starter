

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(USER)
  accounts      Account[]

  isTwoFactorEnabled Boolean  @default(false)
  isStatus      Boolean       @default(true)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id            String          @id @default(cuid())
  email         String
  token         String          @unique
  expires       DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id          String      @id @default(cuid())
  email       String
  token       String      @unique
  expires     DateTime

  @@unique([email, token])
}
 

 model TwoFactorToken {
  id          String      @id @default(cuid())
  email       String
  token       String      @unique
  expires     DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id          String      @id @default(cuid())
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Apps {
  id                String        @id @default(cuid())
  name              String
  description       String?
  image             String?
  backdrop          String?
  packagename       String
  classname         String?
  isStatus          Boolean       @default(true)

  createdBy         String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  updatedBy         String?
}

model HosInfo {
  id                String        @id @default(cuid())
  title             String
  description       String
  icon              String?
  backdrop          String?
  isStatus          Boolean       @default(true)

  createdBy         String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  updatedBy         String?
}

model TvChannel {
  id                String        @id @default(cuid())
  tvIcon            String
  tvName            String
  tvNumber          String?
  tvmedia           String
 // bannerSlider      BannerSlide[]
  tvProgram         TvProgram[]
  isStatus          Boolean       @default(true)

  createdBy         String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  updatedBy         String?
}

model BannerSlide {
  id                String        @id @default(cuid())
  name              String
  image             String
  actionType        String
  isStatus          Boolean       @default(true)

  createdBy         String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  updatedBy         String?

//  bannerSlider TvChannel @relation(fields: [id], references: [id], onDelete: Cascade)
}

model TvProgram {
  id                String        @id @default(cuid())
  name              String
  dateOn            DateTime             
  timeOn            DateTime
  tvchannel         String
  isStatus          Boolean       @default(true)

  createdBy         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  updatedBy         String

  tvProgram TvChannel @relation(fields: [id], references: [id], onDelete: Cascade)
}

model PatientInfo {
  id                      String        @id @default(cuid())
  name                    String
  exceptedDate            DateTime?
  admisDate               DateTime?             
  reason                  String?
  roomType                String?
  nextOfKin               String?
  ward                    String
  roomNumber              String
  boxId                   String?
  isStatus                Boolean       @default(true)

  createdBy               String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  updatedBy               String?
}

model devices {
  id                      String        @id @default(cuid())
  name                    String
  ipaddress               String

  createdBy               String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  updatedBy               String?
}


enum UserRole {
  ADMIN
  USER
}

enum OnShow {
  HomeSlider 
  InfoChannel
  Apps
  Backdrop
  ContentInfo
  BackdropPatient
}